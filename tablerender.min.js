class TableRenderer {
    constructor(data, options = {}) {
        this.data = data;
        this.tableId = options.tableId || 'table-container';
        this.searchId = options.searchId || null;
        this.rowsPerPage = options.rowsPerPage || 10;
        this.columns = options.columns || Object.keys(data[0]);
        this.currentPage = 1;
        this.customClasses = options.customClasses || {};
        this.enableEdit = options.enableEdit || false;
        this.enableDelete = options.enableDelete || false;

        this.createTable();
    }

    createTable() {
        const container = document.getElementById(this.tableId);
        if (!container) {
            console.error(`Table container with ID '${this.tableId}' not found.`);
            return;
        }

        container.innerHTML = `
            <table id="${this.tableId}-table" class="${this.customClasses.table || 'table-render'}">
                <thead>
                    <tr>
                        ${this.columns.map(col => `<th>${col}</th>`).join('')}
                        ${this.enableEdit || this.enableDelete ? '<th>Actions</th>' : ''}
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <div id="${this.tableId}-pagination" class="${this.customClasses.pagination || 'table-render-pagination'}"></div>
        `;

        this.updateTable();

        if (this.searchId) {
            this.attachSearchListener();
        }
    }

    updateTable() {
        const filteredData = this.filterData();
        this.renderTable(filteredData);
        this.renderPagination(filteredData.length);
    }

    filterData() {
        if (!this.searchId) return this.data;

        const searchInput = document.getElementById(this.searchId);
        const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
        return this.data.filter(row => {
            return this.columns.some(col => {
                return String(row[col]).toLowerCase().includes(searchTerm);
            });
        });
    }

    renderTable(filteredData) {
        const tableBody = document.querySelector(`#${this.tableId}-table tbody`);
        if (!tableBody) return;

        const startRow = (this.currentPage - 1) * this.rowsPerPage;
        const endRow = Math.min(startRow + this.rowsPerPage, filteredData.length);
        const rows = filteredData.slice(startRow, endRow);

        tableBody.innerHTML = rows.map(row => `
            <tr class="${this.customClasses.row || ''}">
                ${this.columns.map(col => `<td class="${this.customClasses.cell || ''}">${row[col]}</td>`).join('')}
                ${this.enableEdit || this.enableDelete ? `
                    <td>
                        ${this.enableEdit ? `<button class="${this.customClasses.editBtn || 'edit-btn'}" onclick="renderer.editRow(${row.id})">Edit</button>` : ''}
                        ${this.enableDelete ? `<button class="${this.customClasses.deleteBtn || 'delete-btn'}" onclick="renderer.deleteRow(${row.id})">Delete</button>` : ''}
                    </td>
                ` : ''}
            </tr>
        `).join('');
    }

    renderPagination(totalRows) {
        const totalPages = Math.ceil(totalRows / this.rowsPerPage);
        const paginationContainer = document.getElementById(`${this.tableId}-pagination`);
        if (!paginationContainer) return;

        let paginationHtml = `
            <button class="${this.customClasses.paginationBtn || 'pagination-btn'}" data-page="1">First</button>
            <button class="${this.customClasses.paginationBtn || 'pagination-btn'}" data-page="${this.currentPage - 1}" ${this.currentPage === 1 ? 'disabled' : ''}>Prev</button>
            <span>Page ${this.currentPage} of ${totalPages}</span>
            <button class="${this.customClasses.paginationBtn || 'pagination-btn'}" data-page="${this.currentPage + 1}" ${this.currentPage === totalPages ? 'disabled' : ''}>Next</button>
            <button class="${this.customClasses.paginationBtn || 'pagination-btn'}" data-page="${totalPages}" ${this.currentPage === totalPages ? 'disabled' : ''}>Last</button>
        `;

        paginationContainer.innerHTML = paginationHtml;

        paginationContainer.querySelectorAll(`.${this.customClasses.paginationBtn || 'pagination-btn'}`).forEach(button => {
            button.addEventListener('click', (e) => {
                this.currentPage = Number(e.target.dataset.page);
                this.updateTable();
            });
        });
    }

    attachSearchListener() {
        const searchInput = document.getElementById(this.searchId);
        if (searchInput) {
            searchInput.addEventListener('input', () => this.updateTable());
        }
    }

    editRow(id) {
        const row = this.data.find(row => row.id === id);
        if (!row) return;

        const formHtml = `
            <form method="POST" id="edit-form">
                ${this.columns.map(col => `
                    <label>${col}:
                        <input type="text" name="${col}" value="${row[col]}">
                    </label>
                    <br>
                `).join('')}
                <button type="submit">Update</button>
                <button type="button" onclick="renderer.closeModal()">Close</button>
            </form>
        `;

        this.showModal(formHtml, 'Edit Row');
    }

    showModal(content, title = '') {
        const modal = document.createElement('div');
        modal.className = this.customClasses.modal || 'modal';
        modal.innerHTML = `
            <div class="${this.customClasses.modalContent || 'modal-content'}">
                <span class="${this.customClasses.closeBtn || 'close-btn'}" onclick="renderer.closeModal()">&times;</span>
                ${title ? `<h2>${title}</h2>` : ''}
                ${content}
            </div>
        `;
        document.body.appendChild(modal);
    }

    closeModal() {
        const modal = document.querySelector(`.${this.customClasses.modal || 'modal'}`);
        if (modal) {
            document.body.removeChild(modal);
        }
    }


    deleteRow(id) {
        this.showModal(`
            <h3>Delete Confirmation</h3>
            <p>Are you sure you want to delete this row?</p>
            <button type="button" onclick="renderer.confirmDelete(${id})">Yes</button>
            <button type="button" onclick="renderer.closeModal()">No</button>
        `, 'Delete Confirmation');
    }

    confirmDelete(id) {
        // Here you could connect to your backend for actual deletion
        console.log(`Delete confirmed for row with id ${id}`);
        this.closeModal();
    }
}
